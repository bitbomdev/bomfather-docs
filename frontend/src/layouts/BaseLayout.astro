---
import '../styles/global.css';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import AnnouncementBanner from '../components/AnnouncementBanner.astro';

export interface Props {
  title: string;
  description: string;
}

const { title, description } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title>{title} | Bomfather</title>
    
    <!-- Preload fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=JetBrains+Mono:wght@400;700&family=Manrope:wght@700;800&display=swap" rel="stylesheet">
    
    <!-- ConvertKit Form Script -->
    <script src="https://f.convertkit.com/ckjs/ck.5.js"></script>
  </head>
  <body class="bg-white text-dark">
    <AnnouncementBanner />
    <Header />
    
    <main>
      <slot />
    </main>
    
    <!-- Newsletter Subscription Form -->
    <section class="bg-light-gray py-16">
      <div class="container mx-auto px-4 text-center">
        <h2 class="text-3xl md:text-4xl font-bold font-heading mb-4">Stay Informed on Supply Chain Security</h2>
        <p class="text-lg text-mid-gray max-w-2xl mx-auto mb-8">Get updates on Bomfather, eBPF innovations, and security best practices directly to your inbox.</p>
        
        <div class="max-w-md mx-auto">
          <div id="form-container">
            <form id="newsletter-form" class="bg-white p-6 rounded-lg shadow-sm">
              <div class="flex flex-col md:flex-row gap-4">
                <input 
                  type="email" 
                  id="email-input"
                  placeholder="Your email address" 
                  required 
                  class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
                <button 
                  type="submit"
                  class="bg-blue-600 hover:bg-blue-700 text-white font-medium px-8 py-3 rounded-lg transition-colors"
                >
                  Subscribe
                </button>
              </div>
            </form>
          </div>
          
          <div id="success-message" class="hidden bg-white p-6 rounded-lg shadow-sm">
            <p class="text-dark font-medium">Thank you for signing up!</p>
            <p class="text-mid-gray text-sm mt-2">We've sent a confirmation email to your inbox.</p>
          </div>
        </div>
      </div>
    </section>
    
    <Footer />
    
    <!-- JavaScript for form handling -->
    <script>
      // Cache busting timestamp
      const timestamp = new Date().getTime();
      console.log('Form script loaded with timestamp:', timestamp);
      
      document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('newsletter-form');
        const formContainer = document.getElementById('form-container');
        const successMessage = document.getElementById('success-message');
        
        console.log('Form found:', !!form);
        
        if (form) {
          form.addEventListener('submit', async (e) => {
            e.preventDefault();
            console.log('Form submitted, timestamp:', timestamp);
            
            const emailInput = document.getElementById('email-input');
            const email = emailInput.value;
            
            if (!email) return;
            
            // Create a diagnostic log area
            let logArea = document.getElementById('diagnostic-log');
            if (!logArea) {
              logArea = document.createElement('div');
              logArea.id = 'diagnostic-log';
              logArea.style.display = 'none';
              logArea.style.marginTop = '20px';
              logArea.style.padding = '10px';
              logArea.style.backgroundColor = '#f0f0f0';
              logArea.style.borderRadius = '4px';
              logArea.style.fontSize = '12px';
              logArea.style.fontFamily = 'monospace';
              logArea.style.whiteSpace = 'pre-wrap';
              logArea.style.color = '#333';
              logArea.style.maxHeight = '200px';
              logArea.style.overflow = 'auto';
              logArea.innerHTML = '<h4>Submission Log</h4>';
              formContainer.parentNode.appendChild(logArea);
            }
            
            // Log helper function
            const log = (message) => {
              console.log(message);
              logArea.innerHTML += `<div>${message}</div>`;
            };
            
            try {
              log('Submitting to Netlify function...');
              
              // Display submission attempt
              const submitBtn = form.querySelector('button[type="submit"]');
              const originalBtnText = submitBtn.innerHTML;
              submitBtn.innerHTML = 'Submitting...';
              submitBtn.disabled = true;
              
              // Show log area for debugging
              log(`Attempting to subscribe: ${email}`);
              
              // Add cache busting parameter to request URL
              const functionUrl = `/.netlify/functions/newsletter-subscribe?_=${timestamp}`;
              log(`POST request to ${functionUrl}`);
              
              const response = await fetch(functionUrl, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Cache-Control': 'no-cache, no-store',
                  'Pragma': 'no-cache'
                },
                body: JSON.stringify({ 
                  email,
                  timestamp // Include timestamp in the request body as well
                }),
              });
              
              log(`Response status: ${response.status} ${response.statusText}`);
              
              let responseText;
              try {
                responseText = await response.text();
                log(`Raw response: ${responseText}`);
              } catch (textError) {
                log(`Error getting response text: ${textError.message}`);
                throw new Error('Could not read response');
              }
              
              let result;
              try {
                result = JSON.parse(responseText);
                log(`Parsed response: ${JSON.stringify(result, null, 2)}`);
              } catch (jsonError) {
                log(`Error parsing JSON: ${jsonError.message}`);
                log(`Raw text: ${responseText}`);
                throw new Error('Invalid JSON response');
              }
              
              if (result && result.success) {
                // Show success message
                log('Subscription successful!');
                formContainer.classList.add('hidden');
                successMessage.classList.remove('hidden');
                
                // Show the log for debugging
                logArea.style.display = 'block';
              } else {
                log(`Submission failed: ${result ? (result.error || 'Unknown error') : 'No result'}`);
                if (result && result.details) {
                  log(`Details: ${JSON.stringify(result.details)}`);
                }
                
                alert('There was an error subscribing. Please try again and check the diagnostic log below.');
                
                // Show the log
                logArea.style.display = 'block';
                
                // Reset button
                submitBtn.innerHTML = originalBtnText;
                submitBtn.disabled = false;
              }
            } catch (error) {
              log(`Submission error: ${error.message}`);
              alert(`Error: ${error.message || 'There was a problem with your subscription.'}`);
              
              // Show the log
              logArea.style.display = 'block';
              
              // Reset form if there was an error
              const submitBtn = form.querySelector('button[type="submit"]');
              if (submitBtn.disabled) {
                submitBtn.innerHTML = 'Subscribe';
                submitBtn.disabled = false;
              }
            }
          });
        }
      });
    </script>
  </body>
</html> 